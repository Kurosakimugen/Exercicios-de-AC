# 02-6: determina o numero de valores (tipo float) que pertencem ao intervalo [a;b]
# int conta_intervalo (float *V, int n, float a, float b)
# (sol HHA)

.data
n: .word 6
a: .float 0
b: .float 10
V: .float -15, 0, 2.75, 5.87, 5.65, 35.32
# Resultado esperado neste caso: 4

.text
.global count_range

start:
	la a0,V			# argumento/endereco (A0): endereco do vetor
	la a1,n			# endereco do numero de elementos
	la t0,a			# endereco do limite inferior do intervalo
	la t1,b			# endereco do limite superior do intervalo
	lw a1,0(a1)		# argumento (A1): numero de elementos do vetor (n)
	flw fa0,0(t0)		# argumento (FA0): elemento inferior do intervalo (a)
	flw fa1,0(t1)		# argumento (FA1): elemento superior do intervalo (b)
	jal count_range
	li a7,1			# print result
	ecall
	li a7,10		# stop here
	ecall

count_range:
	mv  t0,a0		# preserva apontador (a0 servir√° para devolver o resultado)
	add a0,zero,zero	# coloca contador a 0
next:	
	beq a1,zero,end		# ja nao ha mais elementos a considerar?
	addi a1,a1,-1		# se houver, decr numero de elementos a considerar
	flw ft0,0(t0)		# carrega FT0 com novo elemento float 
	addi t0,t0,4		# incr apontador para os elementos do vetor
	fle.s t1,fa0,ft0	# compara VF (a<V[i])?1:0 (cf. slide 23)
	beq t1,zero,next	# se 0, fora do intervalo
	fle.s t1,ft0,fa1	# compara VF (V[i]<b)?1:0 (cf. slide 23)
	beq t1,zero,next	# se 0, fora do intervalo
	addi a0,a0,1		# incr numero de elementos no intervalo [a;b]
	j next
end: 
	ret